// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Media string

const (
	MediaImage    Media = "image"
	MediaVideo    Media = "video"
	MediaDocument Media = "document"
)

func (e *Media) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Media(s)
	case string:
		*e = Media(s)
	default:
		return fmt.Errorf("unsupported scan type for Media: %T", src)
	}
	return nil
}

type NullMedia struct {
	Media Media `json:"media"`
	Valid bool  `json:"valid"` // Valid is true if Media is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullMedia) Scan(value interface{}) error {
	if value == nil {
		ns.Media, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Media.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullMedia) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Media), nil
}

type Attachment struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	MediaType Media     `json:"media_type"`
	Url       string    `json:"url"`
	MessageID uuid.UUID `json:"message_id"`
}

type Event struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Title     string    `json:"title"`
	StartAt   time.Time `json:"start_at"`
	EndAt     time.Time `json:"end_at"`
	UserID    uuid.UUID `json:"user_id"`
}

type Message struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uuid.UUID `json:"user_id"`
	Text      string    `json:"text"`
	ThreadID  uuid.UUID `json:"thread_id"`
}

type Revocation struct {
	ID        uuid.UUID `json:"id"`
	RevokedAt time.Time `json:"revoked_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Token     string    `json:"token"`
	UserID    uuid.UUID `json:"user_id"`
}

type Thread struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uuid.UUID `json:"user_id"`
	Title     string    `json:"title"`
}

type User struct {
	ID             uuid.UUID `json:"id"`
	CreatedAt      time.Time `json:"created_at"`
	UpdatedAt      time.Time `json:"updated_at"`
	Email          string    `json:"email"`
	Name           string    `json:"name"`
	HashedPassword string    `json:"hashed_password"`
}

type UsersThread struct {
	ID        uuid.UUID `json:"id"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	UserID    uuid.UUID `json:"user_id"`
	ThreadID  uuid.UUID `json:"thread_id"`
}
