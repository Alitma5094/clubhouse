// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: fcm_tokens.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createFcmToken = `-- name: CreateFcmToken :one
INSERT INTO fcm_tokens (
        id,
        user_id,
        token,
        created_at
    )
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, token, created_at
`

type CreateFcmTokenParams struct {
	ID        uuid.UUID `json:"id"`
	UserID    uuid.UUID `json:"user_id"`
	Token     string    `json:"token"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateFcmToken(ctx context.Context, arg CreateFcmTokenParams) (FcmToken, error) {
	row := q.db.QueryRowContext(ctx, createFcmToken,
		arg.ID,
		arg.UserID,
		arg.Token,
		arg.CreatedAt,
	)
	var i FcmToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.CreatedAt,
	)
	return i, err
}

const getFcmTokens = `-- name: GetFcmTokens :many
SELECT fcm_tokens.id, fcm_tokens.user_id, fcm_tokens.token, fcm_tokens.created_at
FROM fcm_tokens
    JOIN users_threads ON fcm_tokens.user_id = users_threads.user_id
WHERE users_threads.thread_id = $1
`

func (q *Queries) GetFcmTokens(ctx context.Context, threadID uuid.UUID) ([]FcmToken, error) {
	rows, err := q.db.QueryContext(ctx, getFcmTokens, threadID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []FcmToken
	for rows.Next() {
		var i FcmToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
