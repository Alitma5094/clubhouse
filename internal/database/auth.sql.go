// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: auth.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const createRevocation = `-- name: CreateRevocation :one
INSERT INTO revocations (id, revoked_at, updated_at, token, user_id)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, revoked_at, updated_at, token, user_id
`

type CreateRevocationParams struct {
	ID        uuid.UUID `json:"id"`
	RevokedAt time.Time `json:"revoked_at"`
	UpdatedAt time.Time `json:"updated_at"`
	Token     string    `json:"token"`
	UserID    uuid.UUID `json:"user_id"`
}

func (q *Queries) CreateRevocation(ctx context.Context, arg CreateRevocationParams) (Revocation, error) {
	row := q.db.QueryRowContext(ctx, createRevocation,
		arg.ID,
		arg.RevokedAt,
		arg.UpdatedAt,
		arg.Token,
		arg.UserID,
	)
	var i Revocation
	err := row.Scan(
		&i.ID,
		&i.RevokedAt,
		&i.UpdatedAt,
		&i.Token,
		&i.UserID,
	)
	return i, err
}

const getRevokedToken = `-- name: GetRevokedToken :one
SELECT id, revoked_at, updated_at, token, user_id
FROM revocations
WHERE token = $1
`

func (q *Queries) GetRevokedToken(ctx context.Context, token string) (Revocation, error) {
	row := q.db.QueryRowContext(ctx, getRevokedToken, token)
	var i Revocation
	err := row.Scan(
		&i.ID,
		&i.RevokedAt,
		&i.UpdatedAt,
		&i.Token,
		&i.UserID,
	)
	return i, err
}
